# install tpm: git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
# Press prefix + I (capital i, as in Install) to fetch the plugin
# Press prefix + alt + u (lowercase u as in uninstall) to remove the plugin.
# prefix + U updates plugins

# !!!!!!!!!!!!!!!!!!!!!!!!!
# 禁止在tmux下使用Neovim
# !!!!!!!!!!!!!!!!!!!!!!!!!

# 重启tmux: tmux kill-server
# 加载环境: tmux source-file ~/.tmux.conf
# 查看tmux版本: tmux -V

# Session
## 查看Session列表: tmux ls
## 新建Session: tmux new-session -A -s <session_name>
## 进入Session: tmux attach-session -t <session_name>
## 切换Session: tmux switch-client -t <session_name>
## 分离Session(后台运行): tmux detach 或者 <prefix>d
## 分离Session(会话终止): Ctrl+d
## 删除Session: tmux kill-session -t <session_name>

#############################
####  TPM插件管理器  ########
#############################
# 安装插件: <prefix>I
set -g @plugin 'tmux-plugins/tpm'

# 常用的快捷键绑定
set -g @plugin 'tmux-plugins/tmux-sensible'

## --------catppuccin/tmux-------------------
# https://github.com/catppuccin/tmux
# need tmux3.4+(https://github.com/catppuccin/tmux/issues/183)
set -g @plugin 'catppuccin/tmux#v0.1'  # 指定版本,新版本有问题
set -g @catppuccin_flavour 'macchiato' # or frappe, macchiato, mocha
set -g @catppuccin_date_time_text "%Y-%m-%d %H:%M"
set -g @catppuccin_window_left_separator ""
set -g @catppuccin_window_right_separator " "
set -g @catppuccin_window_middle_separator " █"
set -g @catppuccin_window_number_position "right"
set -g @catppuccin_window_default_fill "number"
# set -g @catppuccin_window_default_text "#W"
set -g @catppuccin_window_default_text "#{window_name}" # show window name
set -g @catppuccin_window_current_fill "number"
# set -g @catppuccin_window_current_text "#W"
set -g @catppuccin_window_current_text "#{window_name}" # show window name
set -g @catppuccin_status_modules_left ""
set -g @catppuccin_status_modules_right "directory session date_time"
set -g @catppuccin_status_left_separator  " "
set -g @catppuccin_status_right_separator ""
set -g @catppuccin_status_fill "icon"
set -g @catppuccin_status_connect_separator "no"
set -g @catppuccin_directory_text "#{pane_current_path}"
## ----------------------------------------

# 文本复制
set -g @plugin 'tmux-plugins/tmux-yank'

# pane 控制
set -g @plugin 'tmux-plugins/tmux-pain-control'

# 无鼠标拷贝当前buffer内容
# https://github.com/laktak/extrakto
set -g @plugin 'laktak/extrakto'
# <prefix>Tab
set -g @extrakto_clip_tool_run "tmux_osc52" # issue(https://github.com/minhanghuang/env/issues/7)

# 翻译
set -g @plugin 'sainnhe/tmux-translator'
# the key to trigger translation
set -g @tmux-translator "C-t"
# multiple engines
set -g @tmux-translator-engine "google|ciba|youdao"

# open url and folder
set -g @plugin 'tmux-plugins/tmux-open'
# o: 打开url或者打开对应文件夹

# 窗口管理
# https://github.com/sainnhe/tmux-fzf
set -g @plugin 'sainnhe/tmux-fzf'
# 打开操作菜单
TMUX_FZF_LAUNCH_KEY="C-f"
# 排列循序
TMUX_FZF_ORDER="session|window|pane|command|keybinding|clipboard|process"

# Session管理
# https://github.com/tmux-plugins/tmux-sessionist
set -g @plugin 'tmux-plugins/tmux-sessionist'

## --------tmux-resurrect-------------------
# 克隆当前整个会话session
set -g @plugin 'tmux-plugins/tmux-resurrect'
# 保存当前会话状态
bind C-s source-file ~/.tmux.conf \; run-shell ~/.tmux/plugins/tmux-resurrect/scripts/save.sh
# 恢复上次会话状态
bind C-r source-file ~/.tmux.conf \; run-shell ~/.tmux/plugins/tmux-resurrect/scripts/restore.sh
## ----------------------------------------

#############################
#### General settings #######
#############################
# 启用 focus 事件
set -s focus-events on
# Enable mouse support
# 鼠标选择文本操作繁琐
set -g mouse off
# 当最后一个 pane 关闭时，保持 tmux 会话运行
set -sg exit-empty on
# 启用 UTF-8 支持的状态栏
set -q -g status-utf8 on
# 禁用活动监控
setw -g monitor-activity off
# 禁用铃声监控
setw -g monitor-bell off
# 设置历史记录限制为 10000 行
set -g history-limit 10000

# tmux配置文件配色
set -g default-terminal "screen-256color"

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
set -g pane-base-index 1
set -g renumber-windows on

set -g @copy_use_osc52_fallback on

# 使用系统剪贴板
set-option -g set-clipboard on

#############################
######### leader键 ##########
#############################
# 解绑默认的C-b
unbind C-b
# 重新绑定C-a为leader键
set -g prefix C-a
bind C-a send-prefix

#############################
######## kay-mapping ########
#############################
# `bind -n` 用于绑定一个快捷键，但不需要按下前缀键
# `bind -r` 用于绑定一个快捷键，设置为可重复(repeatable)
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind C-p choose-buffer
# 使用vi模式的键绑定进行导航
setw -g mode-keys vi

## ------------------------- pane
# # 切换到左侧pane
# bind -n C-h select-pane -L
# # 切换到下侧pane
# bind -n C-j select-pane -D
# # 切换到上侧pane
# bind -n C-k select-pane -U
# # 切换到右侧pane
# bind -n C-l select-pane -R
# -- 解决与vim的快捷键冲突
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"

# 移动pane
bind -r C-o swap-pane -D
# 循环切换pane
bind -r [ select-pane -t :.-
bind -r ] select-pane -t :.+
# 单独放大pane
bind + resize-pane -Z
# 关闭pane
bind x confirm-before -p "kill pane '#W'? (y/n)" kill-pane

# 使用 C-v 进入复制模式
bind -r C-v copy-mode
# 退出复制模式<C-c>或<Esc>
bind -T copy-mode-vi C-c send-keys -X cancel
bind -T copy-mode-vi Escape send-keys -X cancel
# 开始选择文本
bind -T copy-mode-vi v send-keys -X begin-selection
# 切换矩形选择模式
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle
# # 光标向上移动 5 行
bind -T copy-mode-vi C-k send-keys -N 5 -X cursor-up
# 光标向下移动 5 行
bind -T copy-mode-vi C-j send-keys -N 5 -X cursor-down
# 移动到行首
bind -T copy-mode-vi C-h send-keys -X start-of-line
# 移动到行尾
bind -T copy-mode-vi C-l send-keys -X end-of-line
# 复制到行尾
bind -T copy-mode-vi Y send-keys -X copy-end-of-line
# 复制选定内容并退出复制模式
bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# 列出缓冲区
bind b list-buffers
# 粘贴缓冲区
bind p paste-buffer

## ------------------------- window
unbind 1
unbind 2
unbind 3
unbind 4
unbind 5
unbind 6
unbind 7
unbind 8
unbind 9
unbind 0
unbind C-n
unbind C-p
#关闭window
bind X kill-window
bind C-x confirm-before -p "kill windows: '#W'? (y/n)" kill-window
# 新建window
bind c new-window
# # 下一个window
# bind -r C-n next-window
# # 上一个window
# bind -r C-p previous-window
bind -n C-n if-shell "$is_vim" "send-keys C-n" "next-window"
bind -n C-p if-shell "$is_vim" "send-keys C-p" "previous-window"
# 切换上一个window
bind -r Tab last-window
# 切分window
bind | split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"
# window重命名
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
# window自动重命名(运行的程序名)
setw -g automatic-rename on
# 切换window(prefix+n)
bind 1 select-window -t 1
bind 2 select-window -t 2
bind 3 select-window -t 3
bind 4 select-window -t 4
bind 5 select-window -t 5
bind 6 select-window -t 6
bind 7 select-window -t 7
bind 8 select-window -t 8
bind 9 select-window -t 9

## ------------------------- session
bind C-c new-session
# 查看Session列表: <prefix>s
# 关闭当前会话
bind Q confirm-before -p "kill session: '#S'? (y/n)" kill-session
# 分离Session
bind d detach
bind -n C-d confirm-before -p "detach session: '#S'? (y/n)" detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'
# session重命名
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# 初始化插件
run '~/.tmux/plugins/tpm/tpm'
